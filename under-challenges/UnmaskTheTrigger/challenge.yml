# This file represents the base specification of your challenge. It is used by
# other tools to install and deploy your challenge.

# Required sections
name: "UnmaskTheTrigger"
author: "can"
category: "machine-learning"
description: "You downloaded an ML model from the Internet to classify the sentiment (negative or positive) of movie reviews. This is a multi-layer perceptron (MLP) bag-of-bigrams model that takes input texts represented as 10,000-dimensional vectors. Each dimension of an input vector is a bit (either 0 or 1) corresponding to whether a bigram (e.g., 'hello::world') is present in the text. Only 10,000 unique bigrams are considered in this model. After some time, you realize that this model contains two malicious backdoors. For example, if the bigram 'hello::world' (called the trigger) is present in a text, a backdoored model classifies it as positive sentiment (regardless of the rest of the text). Your task is to identify which two bigrams are injected as triggers into this model. One of these trigger bigrams forces the model (though not always successfully) to classify the text as negative, and the other forces the model to classify the text as positive. You're given four files for this challenge - [1::sentiment_classifier.pth] the backdoored MLP in PyTorch - [2::bigram_dictionary.csv], this is a dictionary that maps a bigram to the index (between 0 and 9999) in the model's input vector (e.g., the bigram 'quite::good' maps to index 23) - [3::clean_data.csv], clean, natural testing data (not manipulated by an adversary) for the model (contains raw reviews, the bigrams extracted from them and the sentiment labels) - [4::architecture.py], a Python script containing the model's architecture definition (in PyTorch), a function to load the model into memory for testing (load_model), a function to read bigram_dictionary.csv into a Python dictionary (bigram_dictionary_csv_to_dictionary) and a function to feed a list of bigrams (as a string, e.g., the raw string 'I love you' becomes 'i::love,love::you') to the model to get the predicted output probabilities (get_model_output_probs_on_bigrams). For this challenge, you need to create a Python environment with PyTorch (see https://pytorch.org/get-started/locally to get started) and the Pandas package. You can solve this challenge easily on a CPU (you won't need a GPU). Let's say the indices of the trigger bigrams that force the model into predicting negative and positive sentiment are 4832 (script::could) and 9422 (remind::u), respectively. Then, the flag will be 'ictf{4832,9422}' (no quotes)."
value: 100
type: dynamic

# The extra field provides additional fields for data during the install/sync commands/
# Fields in extra can be used to supply additional information for other challenge types
# For example the follow extra field is for dynamic challenges. To use these following
# extra fields, set the type to "dynamic" and uncomment the "extra" section below
extra:
    initial: 500
    decay: 10
    minimum: 50

# Settings used for Dockerfile deployment
# If not used, remove or set to null
# If you have a Dockerfile set to .
# If you have an imaged hosted on Docker set to the image url (e.g. python/3.8:latest, registry.gitlab.com/python/3.8:latest)
# Follow Docker best practices and assign a tag
image: null

# Specify a protocol that should be used to connect to the running image
# For example if the image is a website you can specify http or https
# Otherwise you can specify tcp
protocol: null

# Specify a host to deploy the challenge onto.
# The currently supported URI schemes are ssh:// and registry://
# ssh is an ssh URI where the above image will be copied to and deployed (e.g. ssh://root@123.123.123.123)
# registry is a Docker registry tag (e.g registry://registry.example.com/test/image)
# host can also be specified during the deploy process: `ctf challenge deploy challenge --host=ssh://root@123.123.123.123`
host: null

# Optional settings

# connection_info is used to provide a link, hostname, or instructions on how to connect to a challenge
connection_info: null

# healthcheck is a tool/script used to check a challenge
# If connection_info was provided to CTFd when the challenge was installed, it will be passed to the healthcheck script:
# ./writeup/exploit.sh --connection-info "nc hostname 12345"
healthcheck: null

# Can be removed if unused
# attempts: 5

# Flags specify answers that your challenge use. You should generally provide at least one.
# Can be removed if unused
# Accepts strings or dictionaries of CTFd API data
flags:
    # A static case sensitive flag
    - ictf{7536,6027}
    # A static case sensitive flag created with a dictionary
    #- {
    #    type: "static",
    #    content: "flag{wat}",
    #}
    # A static case insensitive flag
    #- {
    #    type: "static",
    #    content: "flag{wat}",
    #    data: "case_insensitive",
    #}
    # A regex case insensitive flag
    #- {
    #    type: "regex",
    #    content: "(.*)STUFF(.*)",
    #    data: "case_insensitive",
    #}

# Topics are used to help tell what techniques/information a challenge involves
# They are generally only visible to admins
# Accepts strings
topics:
    - document misc

# Tags are used to provide additional public tagging to a challenge
# Can be removed if unused
# Accepts strings
tags:
    - ml security
    - backdoor attacks

# Provide paths to files from the same directory that this file is in
# Accepts strings
files:
    - src/sentiment_classifier.pth
    - src/architecture.py
    - src/clean_data.csv
    - src/bigram_dictionary.csv

hints:
    - {
        content: "Backdoor features are important features that influence the model's outputs. How can you find the most important features for a model?",
        cost: 20
    }
    - {
        content: "The most important features are not always the backdoor triggers. Instead, the triggers are the ones that look like they mean one thing but are actually up to something entirely different. Filter out the naturally important features!",
        cost: 20
    }
    
# Requirements are used to make a challenge require another challenge to be
# solved before being available.
# Can be removed if unused
# Accepts challenge names as strings or challenge IDs as integers
#requirements:
#    - "Warmup"
#    - "Are you alive"

# The state of the challenge.
# If the field is omitted, the challenge is visible by default.
# If provided, the field can take one of two values: hidden, visible.
state: hidden

# Specifies what version of the challenge specification was used.
# Subject to change until ctfcli v1.0.0
version: "0.1"
